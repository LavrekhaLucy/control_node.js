import nodemailer, {Transporter} from 'nodemailer';
import hbs from 'nodemailer-express-handlebars';
import path from 'path';
import {configs} from '../configs/config';
import {emailConstants} from '../constants/email.constant';
import {EmailTypeEnum} from '../enums/email-type.enum';
import {EmailTypeToPayload} from '../types/email-type-to-payload.type';
import {ICar} from '../interfaces/car-interface';

export class EmailService {
    private transporter: Transporter;

    constructor() {

        this.transporter = nodemailer.createTransport({
            service: 'gmail',
            from: 'No reply',
            auth: {
                user: configs.SMTP_EMAIL,
                pass: configs.SMTP_PASSWORD,
            },
        });

        const hbsOptions = {
            viewEngine: {
                extname: '.hbs',
                defaultLayout: 'main',
                layoutsDir: path.join(process.cwd(), 'src', 'templates', 'layouts'),
                partialsDir: path.join(process.cwd(), 'src', 'templates', 'partials'),
            },
            viewPath: path.join(process.cwd(), 'src', 'templates', 'views'),
            extName: '.hbs',
        };


        this.transporter.use('compile', hbs(hbsOptions));
    }

    public async sendMail<T extends EmailTypeEnum>(
        type: T,
        to: string,
        context: EmailTypeToPayload[T]
        ): Promise<void> {
        const {subject, template} = emailConstants[type];
        const mailOptions = {
            from: `"No Reply" <${configs.SMTP_EMAIL}>`,
            to,
            subject,
            template,
            context: {
                ...context,
                frontUrl: configs.APP_FRONT_URL,
            },
        };

        await this.transporter.sendMail(mailOptions);
        console.log(`Email sent to ${to} with template "${template}"`);
    }


    public async sendToManager(car: ICar, seller: { name: string; email: string }): Promise<void> {
        try {
            const message = `
                <p><b>–ê–≤—Ç–æ –ø–æ—Ç—Ä–µ–±—É—î —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:</b></p>
                <ul>
                    <li>ID –∞–≤—Ç–æ: ${car._id}</li>
                    <li>–ù–∞–∑–≤–∞: ${car.title}</li>
                    <li>–ü—Ä–æ–¥–∞–≤–µ—Ü—å: ${seller.name} (${seller.email})</li>
                    <li>–ü—Ä–∏—á–∏–Ω–∞: –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –ø—Ä–æ–π—à–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –º–æ–¥–µ—Ä–∞—Ü—ñ—é (${car.editAttempts} —Å–ø—Ä–æ–± —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∞ –ª–µ–∫—Å–∏–∫–∞)</li>
                    <li>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: ${car.adStatus}</li>
                </ul>
                <p>–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏–π–º—ñ—Ç—å —Ä—ñ—à–µ–Ω–Ω—è —â–æ–¥–æ –π–æ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó.</p>
            `;

            const mailOptions = {
                from: `"No Reply" <${configs.SMTP_EMAIL}>`,
                to: configs.SMTP_MANAGER_EMAIL,
                subject: `URGENT: Ad Moderation Required: ${car.title} (ID: ${car._id})`,
                html: message,
            };

            // from: `"No Reply" <${configs.SMTP_EMAIL}>`,
            //     to: configs.SMTP_MANAGER_EMAIL,
            //     subject: `üö® –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${car.title} (ID: ${car._id})`,
            //     html: message,



            await this.transporter.sendMail(mailOptions);
            console.log('Message to manager sent successfully!');
        } catch (error) {
            console.error('Error sending message to manager:', error);
            throw error;
        }
    }
//     export const sendEmailToManager = async (car: ICar, seller: { name: string; email: string }) => {
//         const message = `
// –ê–≤—Ç–æ –ø–æ—Ç—Ä–µ–±—É—î —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:
// - ID –∞–≤—Ç–æ: ${car._id}
// - –ù–∞–∑–≤–∞: ${car.title}
// - –ü—Ä–æ–¥–∞–≤–µ—Ü—å: ${seller.name} (${seller.email})
// - –ü—Ä–∏—á–∏–Ω–∞: –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –ø—Ä–æ–π—à–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –º–æ–¥–µ—Ä–∞—Ü—ñ—é (${car.editAttempts} —Å–ø—Ä–æ–± —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∞ –ª–µ–∫—Å–∏–∫–∞)
// - –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: ${car.status}
//
// –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏–π–º—ñ—Ç—å —Ä—ñ—à–µ–Ω–Ω—è —â–æ–¥–æ –π–æ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó.
//     `;
//
//         // –¢—É—Ç –º–æ–∂–Ω–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É email —á–µ—Ä–µ–∑ nodemailer
//         console.log("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n", message);
//     };



}
export const emailService = new EmailService();

